[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.1","content-config-digest","f68e5a089f9f053b","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://www.namchee.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[\"books.google.com\",\"assets.literal.club\",\"res.cloudinary.com\"],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null,null,null],\"rehypePlugins\":[null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","posts",["Map",11,12,26,27,38,39,49,50,61,62],"embracing-code-coverage-effectively",{"id":11,"data":13,"body":21,"filePath":22,"digest":23,"legacyId":24,"deferredRender":25},{"title":14,"subtitle":15,"tags":16,"publishedAt":19,"isDraft":20},"Embracing Code Coverage Effectively","High coverage â‰  flawless code",[17,18],"engineering","testing",["Date","2024-08-31T00:00:00.000Z"],false,"import Tweet from 'astro-tweet';\n\nimport DescriptionList from '@/components/astro/modules/posts/html/DescriptionList.astro';\nimport DescriptionTerm from '@/components/astro/modules/posts/html/DescriptionTerm.astro';\nimport DescriptionItem from '@/components/astro/modules/posts/html/DescriptionItem.astro';\n\nWriting high-quality code means writing high-quality tests. A common metric used to measure test quality is code coverage.\nFor many projects, code coverage is used as one of the thresholds for acceptable code.\n\nSadly, code coverage is frequently misused in two ways:\n\n- Using code coverage with excessive thresholds\n- Using code coverage as **the** metric of test quality\n\nDue to its common misuse, code coverage has spawned differing views on its effectiveness.\nWhile the effectiveness of code coverage may vary across teams, there&apos;s one statement\nthat I would like to focus on: code coverage is **a** metric, not **the** metric for test quality.\n\n## Primers of Code Coverage\n\nBy its definition, code coverage is a percentage of source code that has been executed during a particular test suite.\nThere are various types of code coverage but the commonly used ones are *functions*, *statements*, *branches*, and *lines*.\n\nIn theory, higher code coverage means lower chance for a software to have undetected bugs as they have more of its source code\nexecuted during software testing compared to a software that has lower code coverage.\n\nCode coverage is calculated by an additional static analysis tool called **coverage reporter** that instruments and collect metrics\nof the tested code. These metrics will then be divided by the total metrics of the code, resulting in a percentage of coverage.\n\nTo illustrate code coverage better, suppose that we have a collection of mathematical helper functions that we store in `math.ts`:\n\n```ts title=math.ts, copyable\n/**\n * Perform an addition between 2 numbers.\n *\n * @args {number} a - First number\n * @args {number} b - Second number\n *\n * @returns {number} Sum of `a` and `b`\n */\nexport function add(a: number, b: number): number {\n    return a + b;\n}\n\n/**\n * Perform a division between 2 numbers.\n *\n * @args {number} a - First number\n * @args {number} b - Second number\n *\n * @returns {number} `a` divided by `b`\n */\nexport function divide(a: number, b: number): number {\n    return a / b;\n}\n\n/**\n * Perform a modulo operation between 2 numbers.\n *\n * @args {number} a - First number\n * @args {number} b - Second number\n *\n * @returns {number} Remainder of `a` divided by `b`\n */\nexport function modulo(a: number, b: number): number {\n    return a % b;\n}\n\n```\n\n`math.ts` is tested by the following test file:\n\n```ts title=math.spec.ts\nimport { describe, it, expect } from 'vitest';\n\nimport { add, divide } from './math';\n\ndescribe('math.ts', () => {\n  it('should add two numbers', () => {\n    expect(add(1, 2)).toBe(3);\n  });\n\n  it('should divide two numbers', () => {\n    expect(divide(10, 2)).toBe(5);\n  });\n});\n```\n\nAfter execution, the test runner reports the following code coverage:\n\n```bash no-lang\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n----------|---------|----------|---------|---------|-------------------\nAll files |   77.77 |      100 |   66.66 |   77.77 |\n math.ts  |   77.77 |      100 |   66.66 |   77.77 | 34-35\n----------|---------|----------|---------|---------|-------------------\n```\n\nThe code coverage report shows that the test covers all possible branches, as the source code\ndoesn't have any alternative path of execution through a branching statement such as `if` or `switch`.\n\nHowever, the coverage report also shows that the test hasn't fully explored all statements,\nfunctions, and lines in our code as the `modulo` function is not executed in any test scenario.\n\n## Misusing Code Coverage\n\nFrom my observation, there are two reasons why code coverage is a popular metric for tests:\n\n\u003CDescriptionList>\n  \u003CDescriptionTerm>\n    Easy to Measure\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    Depending on the maturity of the test ecosystem, measuring code coverage\n    can be as simple as enabling the coverage reporter through a command line flag or a\n    configuration key in a testing framework\n  \u003C/DescriptionItem>\n\n  \u003CDescriptionTerm>\n    Quantitative\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    Since code coverage is a quantitative metric, code coverage can be easily compared to one another.\n    We can always say that a code with higher coverage covers more scenario and states than a code with low coverage.\n  \u003C/DescriptionItem>\n\u003C/DescriptionList>\n\nAt a glance, code coverage seems to be the all-in-one metric for measuring test quality, as it can show parts of the code\nthat have been executed by the test suite. Most of the time, engineering teams apply a threshold of coverage to reach for\na code to be considered as acceptable.\n\nUnfortunately, the obsession with quantitative data often led to an exceedingly high code coverage threshold to be considered\nacceptable. Contrary to its purposes, setting the threshold too high is **counterproductive** for the following reasons:\n\n\u003CDescriptionList>\n  \u003CDescriptionTerm>\n    Limited Engineering Time\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    While increasing coverage from 0% to ~60% is relatively simple, the same cannot be said for increasing coverage from 80% to ~90%.\n    Rather than getting blocked by the coverage requirements, engineers should spend their time prioritizing more important tasks,\n    such as developing critical features.\n  \u003C/DescriptionItem>\n\n  \u003CDescriptionTerm>\n    Promoting Bad Standards\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    Nifty engineers have devised a workaround for the combination of unrealistic thresholds and tight deadlines: **assertion-free tests**.\n    Consider the following function:\n\n    ```ts title=divide.ts\n    /**\n     * Perform a division between 2 numbers.\n     *\n     * @args {number} a - First number\n     * @args {number} b - Second number\n     *\n     * @returns {number} `a` divided by `b`\n     */\n    export function divide(a, b) {\n\t    return a - b; // oops\n    }\n    ```\n\n    An assertion-free test will &apos;test&apos; the code above with the following test suite:\n\n    ```ts title=divide.spec.ts\n    import { describe, it, expect } from 'vitest';\n\n    import { add, subtract, divide } from './math';\n\n    describe('math.ts', () => {\n      it('should divide two numbers', () => {\n        const result = divide(10, 2); // surprise, it's not 5!\n      });\n    });\n    ```\n\n    Executing the 'test' above will guarantee you a 100% coverage from the coverage reporter, even though the\n    result doesn&apos;t match with the intention of the function.\n\n    In this case code coverage only promotes a sense of false security through false positive results,\n    which is a good example of [Goodhart&apos;s Law](https://en.wikipedia.org/wiki/Goodhart%27s_law):\n\n    > Any observed statistical regularity will tend to collapse once pressure is placed upon it for control purposes\n\n    Assertion-free tests aren&apos;t 100% useless as they are still able to catch common bugs such as bad pointers.\n\n    However, writing a test without assertion is a waste of time as it defeats the whole purpose of testing:\n    ensuring the tested code is **working as expected**.\n  \u003C/DescriptionItem>\n\u003C/DescriptionList>\n\n## What Code Coverage Can&apos;t Tell You\n\nSome may argue that the problems stated above are primarily a management problem or bad test cases problem and\ndoesn&apos;t correlate with why code coverage isn&apos;t the metric for test quality.\n\nHowever, fixing those bad tests and changing the mindset of the management doesn&apos;t cover the inherent weakness of\ncode coverage: *it doesn&apos;t guarantee that all possible program states are explored*.\n\nLet&apos;s revisit the `divide` function from the example above:\n\n```ts title=divide.ts\n/**\n * Perform a division between 2 numbers.\n *\n * @args {number} a - First number\n * @args {number} b - Second number\n *\n * @returns {number} `a` divided by `b`\n */\nexport function divide(a, b) {\n\treturn a - b; // oops\n}\n```\n\nwhich is tested by the following test suite:\n\n```ts title=divide.spec.ts\nimport { expect, it } from 'vitest';\n\nimport { divide } from '.';\n\nit(\"should pass\", () => {\n  const a = 2;\n  const b = 1;\n\n  expect(divide(a, b)).toBe(2);\n});\n```\n\nAfter executing the above test suite, the coverage report will output the following coverage report:\n\n```bash no-lang\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |\n math.ts  |     100 |      100 |     100 |     100 |\n----------|---------|----------|---------|---------|-------------------\n```\n\nwhich basically says that all of our code has been covered by our test suite, therefore is fully tested *in theory*.\nBut what if the `divide` function is called with the following arguments?\n\n```ts title=Nah it's fine as I have 100% coverage. Right?\nconst c = divide(1, 0);\n\n// Aw, snap! ðŸ™„\n```\n\nThe function will just throw a `RangeError` exception to the user. While the problem itself lies in the lack of test cases,\ncode coverage cannot tell you that you *lack one*.\n\nThis is not surprising as coverage reporter is inherently just a *static* analysis tool, which only provides an analysis based\non provided data in test suites. It does not provide an analysis on how the code is executed in *reality*.\n\nThe mismatch between how the code behaves according to the code coverage and how it behaves in reality is better illustrated\nin the following Tweet:\n\n\u003CTweet id=\"1068615953989087232\" />\n\n## What Code Coverage CAN Tell You\n\nJudging from the misuse and weakness I&apos;ve presented in the previous sections, does it mean that code coverage has made\nus waste a lot of engineering time to chase for useless numbers?\n\nFortunately not! Let&apos;s revisit the coverage report from [Primers of Code Coverage](#primers-of-code-coverage) section:\n\n```bash no-lang\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n----------|---------|----------|---------|---------|-------------------\nAll files |   77.77 |      100 |   66.66 |   77.77 |\n math.ts  |   77.77 |      100 |   66.66 |   77.77 | 34-35\n----------|---------|----------|---------|---------|-------------------\n```\n\nTake the function coverage as an example. Based on the weaknesses of code coverage, we can&apos;t confidently say that\n66.66% of the functions has been fully tested yet as code coverage doesn&apos;t guarantee that all program states has been explored.\n\nHowever if we focused on what&apos;s *missing* from the test result and combine them with how code coverage is calculated, we can\nconfidently say that 33.34% of the functions has not been tested at all as none of our test suite has executed those functions.\n\nThis observation has revealed what code coverage is good at: finding the untested. Instead of treating code coverage as **the** metric\nof test quality, engineering teams should treat it as **a** metric to find untested part of our code.\n\nIn a sense, code coverage is analogous to taking the pessimistic approach on the \"half-empty, half-full\" glass rhetoric â€” paying attention to the empty part (the untested areas), not the full part (what has already been covered).\n\n![Focus on the 15% of the unfilled parts. Photo by Engin Akyrut from Unsplash](https://res.cloudinary.com/namchee/image/upload/v1725083488/posts/embracing-code-coverage-effectively/glass-of-water.jpg)\n\n## Final Thoughts\n\nAt the end of the day, code coverage is just a tool and shouldn&apos;t be treated as the all-purpose metric of tests.\nWe should instead use it at what it does best: finding untested part of the code.\n\nWhen talking about the importance about the untested part of the code, [Brian Marrick](http://www.exampler.com/testing-com/writings/coverage.pdf) has an interesting take on it:\n\n> If a part of your test suite is weak in a way that coverage can detect, it&apos;s likely also weak in a way coverage can&apos;t detect.\n\nRather than limiting its effectiveness by using it as **the** metric of tests, I believe the correct approach for code coverage is\naugmenting it with other types of coverage, such as state coverage (which I will be writing about in the future).","src/content/posts/embracing-code-coverage-effectively.mdx","4f4ce78fc06e4e80","embracing-code-coverage-effectively.mdx",true,"hello-world",{"id":26,"data":28,"body":34,"filePath":35,"digest":36,"legacyId":37,"deferredRender":25},{"title":29,"subtitle":30,"tags":31,"publishedAt":33,"isDraft":20},"Hello World!","Reflections of career and future plans",[32],"growth",["Date","2023-12-17T00:00:00.000Z"],"import DescriptionList from '@/components/astro/modules/posts/html/DescriptionList.astro';\nimport DescriptionTerm from '@/components/astro/modules/posts/html/DescriptionTerm.astro';\nimport DescriptionItem from '@/components/astro/modules/posts/html/DescriptionItem.astro';\n\nAfter three years of my career as a professional software engineer, I've finally decided that it's time for me to write\nand share my journey in the world of software engineering through this website.\n\nBut why? Why now instead of one or two years ago on the beginning of my career?\nWhat motivates me to begin at this particular moment?\n\nTo understand my motivations, let's take a trip down memory lane.\n\n## A Flashback to the Past\n\nIn the beginning days of my software engineering journey, I own a personal website that I built from scratch\nin [May of 2022](https://github.com/Namchee/site/tree/1b54cab8ce574ceb11f69d727547324f42a67b55).\nThe resulting website is a barebone website with a short self-introduction and a showcase of personal projects\nmasked with fancy CSS and JS visual tricks without any care for UI and UX principles.\n\n![A screenshot of the old version of namchee.dev](https://res.cloudinary.com/namchee/image/upload/v1/posts/hello-world/old-web)\n\nBack then, my reason for building my old website was to showcase my (admittedly lacking) skills in web development.\nAside from a showcase, I treated my old website as my personal code playground to test\nexperimental ideas that popped into my head, as evidenced by the amount of UI interactions I slapped on it.\n\nAt first, I believed that my old website would help me grow as a software engineer. However, I soon lost\ninterest in keeping it alive since it was just a collection of random ideas and whatever trends mashed up together in\nwhim without more polished thoughts put on it.\n\nUltimately, I feel like the old personal website didn't contribute to my growth as a software engineer.\nIn the end, I made a decision to abandon ship completely and build this website from scratch.\n\nWhile building this website, I spent a considerable amount of time contemplating the reasons behind the failure\nof my previous website to support my growth, despite being a personal playground for me to explore and test my ideas.\nPart of the reason was the lack of commitment.\nHowever, the most crucial factor was that I learned almost nothing from building my old website.\n\nAt this point, I received a hard lesson that creating my personal website isn't enough to accelerate my growth as a professional software engineer.\nWhat makes people learn then? Pondering for answers for days, I accidentally stumbled upon [learning in public](https://www.swyx.io/learn-in-public).\nAfter reading the article, I finally found out the missing part of my learning journey &mdash; the **feedback loop**.\n\n## The Feedback Loop\n\nProfessionals who strive to excel in their respective fields know that learning is a lifetime process. As an aspiring software engineer,\nI understand this and truly enjoy the continuous learning process every day. However, what I failed to recognize during my previous journey was the type\nof learning I was doing &mdash; **learning in private**.\n\nWhile learning in private isn't necessarily bad, it's not the kind of learning that boosts your growth. By learning in private, you walled yourself out\nfrom the community and missed out on feedback.\n\nEmbarking on a learning journey can feel daunting, and having something that got your back is crucial. It's normal to lack knowledge or expertise in the subject you're learning\nor to want to expand your understanding. The quickest way to gain knowledge or expertise is by learning from someone or something with more experience, either directly\nor indirectly. However, this is not possible if you walled yourself out from the community by learning in private.\n\nNow another problem arises â€” how could you get another entity to bestow you the knowledge you seek? Doing it passively by enclosing yourself in your personal haven won't work\nsince nobody will bat an eye if you are a nobody, which is expected when you're still on the first step of your learning journey. Even if you are not a nobody, no one\nwill bat an eye since they don't know what you are trying to achieve. In conclusion, the best way to do this is by actively **sharing** what you are currently doing,\nwhich is the core concept of learning in public.\n\nBy **continously sharing** what you are learning in public, you can **continuously receive feedback** to fuel up your learning cycle and grow continuously.\n\n![The continuous learning loop](https://res.cloudinary.com/namchee/image/upload/v1/posts/hello-world/continuous-learning)\n\nAs a software engineer, learning in public doesn't just mean open-sourcing whatever you're working on and leaving it as-is. Software engineers must also involve\nthemselves in the community by opening themselves to feedback, which is missing from my approach to learning in my previous attempt.\n\n## The Blueprint\n\nMoving on from the philosophical part of this post, I want this website to be my personal platform to learn in public. Specifically, this website will serve as:\n\n\u003CDescriptionList>\n  \u003CDescriptionTerm>\n    Knowledge Base\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    Imagine having a personal library that stores records of all your experiences. Whenever I encounter a problem, I can trace back my logs and check if I have solved similar\n    issues in the past. Not only will it help me resolve my issue faster by reducing redundancy, scouring past logs will also enable others who might encounter similar problems\n    to solve them. In the end, everyone is happy!\n  \u003C/DescriptionItem>\n\n  \u003CDescriptionTerm>\n    Code Playground\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    Since I found my past experiments to be insightful, I will continue my code playground and share ideas or experiments I've conducted as either code snippets or posts.\n    Hopefully, I can test out my ideas and sharpen them through public feedback. Don't be shy to drop feedback!\n  \u003C/DescriptionItem>\n\n  \u003CDescriptionTerm>\n    Giving Back Platform\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    I owe a lot for my current position to the open-source community. This website and all its contents will serve as a thank-you letter to the open-source community\n    and keep the open-source spirit alive.\n  \u003C/DescriptionItem>\n\n  \u003CDescriptionTerm>Productive Distraction\u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    In the past, I used to play too much video games during my free time. However, I later realized that this activity was unproductive for my growth as a software engineer.\n    Therefore, I vow to replace it with more productive habits by maintaining this website.\n  \u003C/DescriptionItem>\n\u003C/DescriptionList>\n\n## Final Thoughts\n\nWith that in mind, I hope that everyone, including you who is reading this, can continuously learn and grow through this website.\n\nI know, I'm very late in the blogging game when a lot of people already started learning in public early in their careers. However, I believe that it is better to start late than never start at all. Cheers!","src/content/posts/hello-world.mdx","6fbd4ddb56de4db1","hello-world.mdx","utilpocalypse",{"id":38,"data":40,"body":45,"filePath":46,"digest":47,"legacyId":48,"deferredRender":25},{"title":41,"subtitle":42,"tags":43,"publishedAt":44,"isDraft":20},"Utilpocalypse","One god file to ruin them all",[17],["Date","2024-10-26T00:00:00.000Z"],"import DescriptionList from '@/components/astro/modules/posts/html/DescriptionList.astro';\nimport DescriptionTerm from '@/components/astro/modules/posts/html/DescriptionTerm.astro';\nimport DescriptionItem from '@/components/astro/modules/posts/html/DescriptionItem.astro';\n\nIt's weekend, you're burning up and currently building a killer side project that (hopefully) make billions\nin the future. You're starting of with writing a simple function for your authentication flow that transforms\na `pascalCase` string to a `snake_case` one.\n\n```ts title=auth.ts\n// ...the rest of authentication code\n\nfunction toSnakeCase(text: string): string {\n\treturn text.split(/\\.?(?=[A-Z])/)\n\t\t.join(\"_\")\n\t\t.toLowerCase();\n}\n```\n\nNice, that's one feature down! Suddenly, you realized that you *might* need to use this function somewhere\nelse and duplicating the function is a no-go since you just read the [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) book.\nA brilliant idea pops up on your head:\n\n> Hey, why don't I create a file that stores these small, reusable functions that can be imported from any files?\n\nYou finally extracted this function to a separate file that you call `util.ts`, thus mark the starting point of *utility* or\n*helper* file (or class / module). You are feeling that creating the utility file is the best decision you've made in this project.\n\n```ts  title=util.ts\nexport function toSnakeCase(text: string): string {\n\treturn text.split(/\\.?(?=[A-Z])/)\n\t\t.join(\"_\")\n\t\t.toLowerCase();\n}\n```\n\n## From Utilities to Utilpocalypse\n\nTwo days later, a module needs to capitalize each words from a string to make them look prettier to the user.\nSince other modules _might_ also need this function, you decided to implement it by appending it to the utility file you've\ncreated previously.\n\n```ts title=The first addition to util.ts\nexport function toSnakeCase(text: string): string {\n\treturn text.split(/\\.?(?=[A-Z])/)\n\t\t.join(\"_\")\n\t\t.toLowerCase();\n}\n\nexport function capitalizeWords(text: string): string {\n\treturn text.split(\" \")\n\t\t.map(word => word.charAt(0).toUppercase() + word.slice(1).toLowercase())\n\t\t.join(\" \");\n}\n```\n\nThat's one small task down the drain and indeed, there _are_ modules that actually need this function too!\n\nBut the next day, you need a function to generate a random number between two values. Without thinking much, you implemented\nit in the utility file based on the previous positive experience.\n\n```ts title=The second addition to util.ts\nexport function toSnakeCase(text: string): string {\n\treturn text.split(/\\.?(?=[A-Z])/)\n\t\t.join(\"_\")\n\t\t.toLowerCase();\n}\n\nexport function capitalizeWords(text: string): string {\n\treturn text.split(\" \")\n\t\t.map(word => word.charAt(0).toUppercase() + word.slice(1).toLowercase())\n\t\t.join(\" \");\n}\n\n// inclusive random\nexport function randomInt(min: number, max: number): number {\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n}\n```\n\nAnd the implementation goes on and on with each passing days until 3 months later the utility file has bloated beyond\nbelief from trying to share small functions that _might_ be used by multiple modules.\n\n```ts title=The XXX addition to util.ts (why it's so big now?)\nexport function toSnakeCase(text: string): string {\n\treturn text.split(/\\.?(?=[A-Z])/)\n\t\t.join(\"_\")\n\t\t.toLowerCase();\n}\n\nexport function capitalizeWords(text: string): string {\n\treturn text.split(\" \")\n\t\t.map(word => word.charAt(0).toUppercase() + word.slice(1).toLowercase())\n\t\t.join(\" \");\n}\n\n// inclusive random\nexport function randomInt(min: number, max: number): number {\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// shuffle using Fisher-Yates\nexport function shuffleArray\u003CT = unknown>(array: T[]): T[] {\n\tlet currentIndex = array.length, randomIndex;\n\n\twhile (currentIndex !== 0) {\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t    currentIndex--;\n\n\t    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n\t  }\n\n\t  return array;\n}\n\nexport function debounce\u003CT = (...args: unknown[]) => unknown>(func: T, wait: number): T {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n}\n\n// and 50 more 'small' functions that constitues into a 2_000+ lines of code\n```\n\nWhile it _does_ solve the potential repetition problem, the utility file is now hardly readable\neven with the help of code comments and even harder to maintain due it sheer size. At this point,\nthe code has reached a point that I call **utilpocalypse**.\n\n## The Problem With Utilpocalypse\n\nUsing a utility file isn't 100% a bad thing. Compared to using something robust like [design patterns](https://refactoring.guru/), they are\nmuch simpler and have lower overhead. However, bloating your utility file to the point of utilpocalypse poses several problems:\n\n\u003CDescriptionList>\n  \u003CDescriptionTerm>\n    Unclear Intentions\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    [Intention-revealing names](https://wiki.c2.com/?IntentionRevealingNames) is one of recommended practices in software development,\n    which can also be applied to files. What a file does should be clear just from reading its name.\n\n    But what can we actually discern from a file called `util`, `lib`, `common`, or `helper`? Yes, it's a utility, but what _kind_ of utility is it?\n    At a hindsight, it doesn't look too bad... until you see this kind of folder structure from my old project.\n\n    ![Utilities of utility of libraries. Very clear indeed](https://res.cloudinary.com/namchee/image/upload/v1729928350/posts/utilpocalypse/nested-utils.jpg)\n  \u003C/DescriptionItem>\n\n  \u003CDescriptionTerm>\n    Maintenance Nightmare\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    One day, you need a utility and want to check if the function has been implemented or not.\n    Since you have a utility file, you decide to search for relevant implementations on the file.\n    Unfortunately, it's hard to traverse the file with naked eye due to its bloated size.\n\n    Although the IDE search functionality helps, the implementation still escapes your search as it exist\n    with a different name ([naming things are hard](https://martinfowler.com/bliki/TwoHardThings.html) you know?) and you're not sure how to query it correctly.\n    Since you can't find it, you implemented it from scratch and appended it.\n\n    Congratulations, you have unintentionally created a [functional duplication](https://blog.cleancoder.com/uncle-bob/2021/10/28/functional-duplication.html) which is a problem that utility file tries to solve!\n\n    Other problems with utilpocalypse is they are harder to test due to the sheer number of code it contains and harder to refactor due to the possibility\n    of utilities that depends on other utilities.\n  \u003C/DescriptionItem>\n\n  \u003CDescriptionTerm>\n    Promoting Bad Practices\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    When you need a functionality, you will instinctively try to append it to the utility file instead of trying to do intricate design of the implementation to avoid code smells, thus adding more bloat to the utility file.\n\n    It works _before_ (when the utility file hasn't reached utilpocalypse), why not now?\n  \u003C/DescriptionItem>\n\u003C/DescriptionList>\n\nIn simple terms, utilpocalypse is a concrete case of [god objects](https://en.wikipedia.org/wiki/God_object).\nIt's too big and contains too much capabilities.\n\n## Untangling Utilpocalypse\n\nAs I've said in the previous section, I don't disregard utility module as something taboo. The main problem of utilpocalypse is *how the utilities are being structured*.\nIn short, you shouldn't combine your utilities into a single file or module.\n\nThere are two ways to organize your utilities without grouping them into a single module and turning them into a utilpocalypse:\n\n\u003CDescriptionList>\n  \u003CDescriptionTerm>\n    Group by Proximity\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    The first and the most effective way to untangle the utilpocalypse is by organizing the utilities by their proximity.\n\n    Suppose that you want to extract a group of utilities that's only used by a specific module, instead of extracting them into the global utility,\n    you can create a local utility module that is not exposed outside the module instead of appending it to the global utility module.\n  \u003C/DescriptionItem>\n\n  \u003CDescriptionTerm>\n    Group By Functionality\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    In most cases, utilities can be grouped by their similar functionalities. The usual way to organize utilities is by creating\n    a utility folder and group utilities together into modules or service classes.\n\n    From the example above, we can group `toSnakeCase` and `capitalizeWords` into a utility module called `string.ts`\n    as they both deals with strings, `shuffleArray` into a module called `array.ts`, etc.\n\n    > You might be wondering on how to determine the newly separated module name.\n    > The thing is, you can name them whatever you want as long as its not something generic like `util(s)`, `helper`, `lib`, `common`, `handler`, and other similar words.\n\n    Do keep in mind that having too much module in the same level may cause maintenance problems. Try to find your own\n    sweet spot by limiting the number of utility modules or logically group them into subdirectories.\n  \u003C/DescriptionItem>\n\u003C/DescriptionList>\n\n## Final Thoughts\n\nUtility module is widely known as a good tool to share small-but-reusable libraries to multiple unrelated module.\nAlas like every other good tool, using it irresponsibly turns them into a utilpocalypse which can slow your development workflow.\n\nWhen a utilpocalypse happens, don't be afraid to split and organize your utilities by their proximity or functionalities into smaller\nand more focused utility modules. Find your own sweet spot and [move those utilities until it feels right](https://react-file-structure.surge.sh/).\n\nAlthough it feels wasteful on small scale projects, keeping your utilities clean will save your time from unnecessary searching and accidental duplication.","src/content/posts/utilpocalypse.mdx","e954f5b659d2df76","utilpocalypse.mdx","upgrading-astro-code-snippets",{"id":49,"data":51,"body":57,"filePath":58,"digest":59,"legacyId":60,"deferredRender":25},{"title":52,"subtitle":53,"tags":54,"publishedAt":56,"isDraft":20},"Upgrading Astro Code Snippets","Make the code snippet truly yours",[55],"astro",["Date","2024-12-25T00:00:00.000Z"],"Markdown is commonly used to store textual contents when building a site with Astro. During the build process, Astro will take\nall markdowns transform them into its HTML equivalent. Users can then style the markups with CSS however they wish.\n\nHowever, customization through CSS is pretty limited as customizing the actual markup or behavior is out of the table. To allow\ngreater degree of customization, users can opt-in to [MDX](https://docs.astro.build/en/guides/integrations-guide/mdx/).\n\nMDX allows users to utilize custom components with markup-like syntax similar to how we use those components in Astro files or JSX.\n\n```markdown title=Using custom components in MDX\n---\ntitle: 'Hello World!'\npublishedAt: 2024-12-17\n---\nimport MyComponent from 'path/to/component.astro';\n\n\u003CMyComponent>\n  Hello World!\n\u003C/MyComponent>\n```\n\nHowever, this is impractical when users want to replace default elements as they\nare forced to use JSX-like syntax for every element and lose the simplicity of defining elements in markdown.\n\nFortunately, MDX also allows users to re-map HTML elements into custom components\nby exporting component map in MDX files as `components` constant.\n\n\n```markdown title=Replacing default elements with custom elements\n---\ntitle: 'Hello World!'\npublishedAt: 2024-12-17\n---\n\nimport Head1 from 'path/to/Head1.astro';\n\nexport const components = {\n  // Replace \u003Ch1> with Head1\n  h1: Head1,\n}\n```\n\nAfter seeing the syntax, you might be wondering: how do I manage the props? What attributes are passed to the mapped element?\nCan I apply a pre-defined CSS classes to mapped elements?\n\nUnfortunately, it seems that [Astro's MDX integration documentation](https://docs.astro.build/en/guides/integrations-guide/mdx/) only touches\nthe surface of this syntax and the [official MDX documentation](https://mdxjs.com/table-of-components/) only tells you about what elements\nthat can be re-mapped.\n\nThis post will guide you through customizing default markdown elements using the `components` syntax. We will using the default code snippets\ncomponent as the guinea pig and upgrade them into similar code snippets that you see in this site.\n\n![The default snippet. Looks great, but can we make it even better?](https://res.cloudinary.com/namchee/image/upload/v1734152131/posts/supercharing-astro-code-snippet/default-snippet.png)\n\n> I will be using [UnoCSS](https://unocss.dev/) for styling, which is an alternative of [TailwindCSS](https://tailwindcss.com/). However, the styling can 100% be implemented with vanilla CSS.\n\n## Deconstructing the Code Snippet\n\nBefore moving on to the actual customization of the snippet, we need to understand how Astro handles markdown files.\n\nFor each markdown file, Astro will parse the content using a processor called [remark](https://github.com/withastro/astro/tree/main/packages/markdown/remark),  which is a part of the\n[unified](https://unifiedjs.com/) toolchain. From the markdown, remark will produce an [abstract syntax tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) (AST). The AST will\nthen be transformed into HTML tags using another processor in the same toolchain: [rehype](https://github.com/rehypejs/rehype).\n\n> You might be wondering why we need to transform the markdown into an AST and not directly use something like RegExp.\n> \u003Cbr />\n> This is because markdown (and HTML) is not a [regular language](https://en.wikipedia.org/wiki/Regular_language). Trying to parse non-regular language with **regular** tends to be error prone.\n\nThe functionality of remark and rehype can be augmented using [plugins](https://unifiedjs.com/learn/guide/create-a-rehype-plugin/) that provides additional features,\nsuch as custom syntax and syntax highlighting.\n\nBy default, Astro enables [GitHub-flavored markdown](https://github.github.com/gfm/) and [SmartyPants](https://github.com/silvenon/remark-smartypants)\nplugin to extend the basic markdown syntax. For syntax highlighting, Astro uses [Shiki](https://shiki.matsu.io/packages/rehype) by default or\nusers can opt-in to [Prism](https://prismjs.com/); both available as Rehype plugins.\n\nThe diagram below shows a simplified pipeline of markdown transformation to HTML that occurs during the build process.\n\n```mermaid\nflowchart LR\n\tMarkdown --> astro[Astro Compiler]\n\tastro --> remark[Remark + Plugins]\n\tremark -- AST --> rehype(Rehype + Plugins)\n\trehype -- HTML tags --> astro\n\tastro --> page(HTML page)\n```\n\nWhen processing code blocks, the process above will output HTML tags similar to the following:\n\n```html title=Example HTML output of a code block after Remark + Rehype pipeline.\n\u003Cpre\n\tclass=\"astro-code github-dark\"\n\tstyle=\"background-color:#24292e;color:#e1e4e8;overflow-x:auto\"\n\ttabindex=\"0\"\n\tdata-language=\"js\"\n>\n\t\u003Ccode>\n    \u003Cspan class=\"line\">\n      \u003Cspan style=\"color:#F97583\">&lt;!\u003C/span>\n      \u003Cspan style=\"color:#E1E4E8\">doctype html\u003C/span>\n      \u003Cspan style=\"color:#F97583\">&gt;\u003C/span>\n    \u003C/span>\n    \u003Cspan class=\"line\">\n      \u003Cspan style=\"color:#E1E4E8\">&lt;\u003C/span>\n      \u003Cspan style=\"color:#85E89D\">html\u003C/span>\n      \u003Cspan style=\"color:#B392F0\"> lang\u003C/span>\n      \u003Cspan style=\"color:#F97583\">=\u003C/span>\n      \u003Cspan style=\"color:#9ECBFF\">\"en\"\u003C/span>\n      \u003Cspan style=\"color:#E1E4E8\">&gt;\u003C/span>\n    \u003C/span>\n    \u003Cspan class=\"line\">\n      \u003Cspan style=\"color:#E1E4E8\">  &lt;\u003C/span>\n      \u003Cspan style=\"color:#85E89D\">head\u003C/span>\n      \u003Cspan style=\"color:#E1E4E8\">&gt;\u003C/span>\n    \u003C/span>\n    \u003C!-- and the rest of the tags -->\n\t\u003C/code>\n\u003C/pre>\n```\n\nThis HTML tags will then be used by Astro to replace code blocks during the markdown\ntransformation process into an HTML page for:\n\n- All code fences (\\`\\`\\`) defined in Markdown and MDX files.\n- Content defined with [`\u003CCode />`](https://docs.astro.build/en/guides/syntax-highlighting/#code-) or [`\u003CPrism />`](https://docs.astro.build/en/guides/syntax-highlighting/#prism-) component.\n\n## Replacing The Default Code Snippet\n\nOur first step to customize the code snippet is by replacing the default component with\na custom component that wraps the original one using Astro [`\u003Cslot />`](https://docs.astro.build/en/basics/astro-components/#slots).\n\nTo do that, we can assign a custom mapping for HTML elements by exporting a new constant\ncalled `components` in our MDX files.\n\n```markdown title=hello-world.mdx\n---\ntitle: 'Hello World!'\npublishedAt: 2024-12-17\n---\n\nimport CodeSnippet from '../../components/CodeSnippet.astro';\n\nexport const components = { // [!code highlight]\n\t// in MDX, code snippets are defined with \u003Cpre>  // [!code highlight]\n\tpre: CodeSnippet, // [!code highlight]\n} // [!code highlight]\n```\n\nWe can then define `CodeSnippet` as:\n\n```astro title=CodeSnippet.astro\n\u003Cfigure>\n\t\u003Cfigcaption>\n    This is a caption\n\t\u003C/figcaption>\n\n\t\u003Cslot />\n\u003C/figure>\n\n```\n\nSave the file and we will be greeted by this weird element.\n\n![Well... that was unexpected](https://res.cloudinary.com/namchee/image/upload/v1734274270/posts/supercharing-astro-code-snippet/first-try)\n\nSo what's happening here? Why does wrapping the code block in a `\u003Cfigure>` element ruins the structure entirely? Well it turns out, we replaced\nthe entire `\u003Cpre>` element with `\u003Cfigure>` as shown in the following snippet.\n\n```html title=HTML output of CodeSnippet.astro\n\u003Cfigure>\n\t\u003Cfigcaption>\n    This is a caption\n\t\u003C/figcaption>\n\n  \u003C!-- The \u003Cpre> is gone! -->\n\n  \u003Ccode>\n    \u003Cspan class=\"line\">\n      \u003Cspan style=\"color:#F97583\">&lt;!\u003C/span>\n      \u003Cspan style=\"color:#E1E4E8\">doctype html\u003C/span>\n      \u003Cspan style=\"color:#F97583\">&gt;\u003C/span>\n    \u003C/span>\n    \u003Cspan class=\"line\">\n      \u003Cspan style=\"color:#E1E4E8\">&lt;\u003C/span>\n      \u003Cspan style=\"color:#85E89D\">html\u003C/span>\n      \u003Cspan style=\"color:#B392F0\"> lang\u003C/span>\n      \u003Cspan style=\"color:#F97583\">=\u003C/span>\n      \u003Cspan style=\"color:#9ECBFF\">\"en\"\u003C/span>\n      \u003Cspan style=\"color:#E1E4E8\">&gt;\u003C/span>\n    \u003C/span>\n    \u003Cspan class=\"line\">\n      \u003Cspan style=\"color:#E1E4E8\">  &lt;\u003C/span>\n      \u003Cspan style=\"color:#85E89D\">head\u003C/span>\n      \u003Cspan style=\"color:#E1E4E8\">&gt;\u003C/span>\n    \u003C/span>\n    \u003C!-- and the rest of the tags -->\n  \u003C/code>\n\u003C/figure>\n```\n\nWell, that's **not** what we wanted at all! We don't want to remove the `\u003Cpre>` entirely as we need to preserve\nthe preformatted styling. After wrapping the `\u003Ccode>` block inside a `\u003Cpre>` element, the previously\nbutchered element will look like this.\n\n![Look ma! I restored the formatting!](https://res.cloudinary.com/namchee/image/upload/v1734770479/posts/supercharing-astro-code-snippet/second-try)\n\nWe've restored the formatting at this point, but we're still missing the theming from the original component. Obviously, we can apply the intended class, style, and other attributes to the `\u003Cpre>` element directly.\nHowever, this means that we wasted the theming we've done from Astro's config entirely.\n\nFortunately, since the custom component is implemented as an Astro component, Astro treats those passed attributes as **component props** which is\nprovided by `Astro.slot` globals.\n\n```astro title=CodeSnippet.astro\n---\nconst props = Astro.props; // [!code highlight]\n---\n\n\u003Cfigure>\n  \u003Cfigcaption>\n    This is a caption\n  \u003C/figcaption>\n\n  \u003Cpre {...props}>\u003Cslot />\u003C/pre> // [!code highlight]\n\u003C/figure>\n\n```\n\nwhich results in\n\n![Passing the `props` surely do the trick](https://res.cloudinary.com/namchee/image/upload/v1734792284/posts/supercharing-astro-code-snippet/third-try)\n\nWe did it! We've successfully rendered a custom code snippet component without breaking the existing components. We can now begin customizing the component.\n\n## Supercharging The Code Snippet\n\nSince we have successfully replaced the default code block with our custom element, it's time to upgrade our components with the following additional features:\n\n- Captions\n- Line Numbers\n- Line or Code Highlighting\n- Show Code Language\n- Copy to Clipboard Button\n\nBefore we implement these new features however, there is one important trick that we should know: passing additional props.\n\n### Passing Additional Props to Code Snippet\n\nIn the previous section, all we did with the props is passing an already defined props. However, some of our additional properties requires\nadditional information that Shiki doesn't provide by default (namely captions and copy to clipboard).\n\nThe good news is, Shiki already addresses this issue by giving users the ability to add [metadata](https://shiki.style/guide/transformers#meta) to code blocks that users can provide\nin the opening tag after language definition.\n\nThe bad news is, Shiki integration in Astro doesn't pass them to the element in any form, so trying to access `Astro.props` to get the extra metadata will yield nothing.\n\n```markdown title=Trying to pass 'title' as a metadata to the component (it doesn't work!)\n\u003C!-- ```html foo --->\n\u003C!doctype html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\n    \u003Cmeta charset=\"utf-8\" />\n    \u003Ctitle>Example HTML5 Document\u003C/title>\n\t\u003C/head>\n  \u003Cbody>\n    \u003Cp>Test\u003C/p>\n  \u003C/body>\n\u003C/html>\n\u003C!-- ``` -->\n```\n\nSince Astro doesn't pass metadata by default, we need to play around with the [Shiki Transformer API](https://shiki.matsu.io/guide/transformers) to create a transformer\nthat passes the metadata as an attribute. Fortunately, it's quite simple to do so through `shikiConfig` that Astro exposes.\n\n```js title=astro.config.mjs\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: {\n      transformers: [{\n        pre(hast) {\n          hast.properties['data-meta'] = this.options.meta?.__raw; // [!code highlight]\n        }\n      }]\n    }\n  },\n});\n```\n\nWith the above config, Shiki will pass the metadata as an HTML property `data-meta` which can then be accessed normally through\n`Astro.props`.\n\n```html title=data-meta is properly filled now!\n\u003Cpre\n\tclass=\"astro-code github-dark\"\n\tstyle=\"background-color:#24292e;color:#e1e4e8;overflow-x:auto\"\n\ttabindex=\"0\"\n\tdata-language=\"js\"\n\tdata-meta=\"foo\"\n>\n  \u003Ccode>\n    \u003Cspan class=\"line\">\n      \u003Cspan style=\"color:#F97583\">&lt;!\u003C/span>\n      \u003Cspan style=\"color:#E1E4E8\">doctype html\u003C/span>\n      \u003Cspan style=\"color:#F97583\">&gt;\u003C/span>\n    \u003C/span>\n    \u003Cspan class=\"line\">\n      \u003Cspan style=\"color:#E1E4E8\">&lt;\u003C/span>\n      \u003Cspan style=\"color:#85E89D\">html\u003C/span>\n      \u003Cspan style=\"color:#B392F0\"> lang\u003C/span>\n      \u003Cspan style=\"color:#F97583\">=\u003C/span>\n      \u003Cspan style=\"color:#9ECBFF\">\"en\"\u003C/span>\n      \u003Cspan style=\"color:#E1E4E8\">&gt;\u003C/span>\n    \u003C/span>\n    \u003Cspan class=\"line\">\n      \u003Cspan style=\"color:#E1E4E8\">  &lt;\u003C/span>\n      \u003Cspan style=\"color:#85E89D\">head\u003C/span>\n      \u003Cspan style=\"color:#E1E4E8\">&gt;\u003C/span>\n    \u003C/span>\n    \u003C!-- and the rest of the tags -->\n  \u003C/code>\n\u003C/pre>\n```\n\nSince we *might* be passing more metadata in the future, it's advisable to define a schema for writing metadata to avoid\nproblems during parsing in the future.\n\nFor the sake of simplicity, we are going to use `key1=value1,key2,[...key]` schema in this post that can be parsed with:\n\n```astro title=Parsing Shiki raw metadata through Astro.props\n---\nconst meta: Record\u003Cstring, string> = {};\nconst { 'data-meta': dataMeta, ...props } = Astro.props;\n\nif (dataMeta) {\n  dataMeta.split(',').forEach((prop: string) => {\n    const tokens = prop.split('=');\n    meta[tokens[0].trim()] = tokens[1];\n  });\n}\n\nconst title = meta.title;\n---\n```\n\nNow, we can *finally* move on to customizing the component.\n\n> For the sake of clarity, I'll be changing the default theme of Shiki to `min-light` which you can change via Astro config.\n>\n> ```js\n> import { defineConfig } from 'astro/config';\n>\n> export default defineConfig({\n>    markdown: {\n>      shikiConfig: {\n>       theme: 'min-light', // [!code highlight]\n>\t  }\n>\t},\n> });\n> ```\n\n### Adding Captions\n\nTo add captions to the code block, we can pass the caption as `title` inside the metadata and embed it on `figcaption`:\n\n```astro title=CodeSnippet.astro, copyable\n---\nconst meta: Record\u003Cstring, string> = {};\nconst { 'data-meta': dataMeta, ...props } = Astro.props;\n\nif (dataMeta) {\n  dataMeta.split(',').forEach((prop: string) => {\n    const tokens = prop.split('=');\n    meta[tokens[0].trim()] = tokens[1];\n  });\n}\n\nconst title = meta.title;\n---\n\n\u003Cfigure class=\"overflow-hidden rounded-md\">\n  {\n    title && (\n      \u003Cfigcaption class=\"flex justify-between items-center text-xs p-2 px-4 border-b border-b-gray-500 leading-normal rounded-t-md bg-gray-700 text-white\">\n        \u003Cp class=\"mb-0\">{title}\u003C/p>\n      \u003C/figcaption>\n    )\n  }\n\n  \u003Cpre\n    class={`${className} relative rounded-none`}\n    {...props}>\u003Cslot />\u003C/pre>\n\u003C/figure>\n```\n\nAfter the changes has been applied, our component should look like this:\n\n![Look ma! I've added title to my component](https://res.cloudinary.com/namchee/image/upload/v1735005025/posts/supercharing-astro-code-snippet/adding-title)\n\n### Adding Line Numbers\n\nUnfortunately, neither Astro nor Shiki provides us with any APIs regarding line numbers. Therefore, we have to rely to good ol' CSS\nto implement this feature.\n\nSince all lines are actually `\u003Cspan>`s that have `line` as one of its class, we can combine the `::before` pseudo-element with [CSS Counters](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_counter_styles/Using_CSS_counters):\n\n```css title=Applying line numbers to code snippet using CSS counters, copyable\n.astro-code {\n  overflow-x: auto;\n}\n\n.astro-code code {\n  /* Define a counter for each \u003Ccode> inside .astro-code */\n  counter-reset: step;\n  /* Start from zero, increment the counter */\n  counter-increment: step 0;\n\n\tfont-size: 14px;\n\n  width: fit-content;\n  min-width: 100%;\n  display: block;\n}\n\n.astro-code code .line:not(:last-child) {\n  display: inline-block;\n  width: 100%;\n  padding-right: 2rem;\n}\n\n.astro-code code .line:not(:last-child)::before {\n  content: counter(step);\n  counter-increment: step;\n  width: 2rem;\n  margin-right: 1.25rem;\n  display: inline-block;\n  margin-left: auto;\n  text-align: right;\n\n  /* Fix element position during horizontal scroll */\n  position: sticky;\n  left: 0;\n  z-index: 1;\n\n  /* Give a bit of space to counter on horizontal scroll */\n  padding-right: 0.25rem;\n\n  /* Illustrative purpose, please extract the value from the theme instead */\n  background-color: white;\n  color: hsla(0, 0%, 0%, 0.5);\n}\n```\n\n> You might notice that we used `:not(:last-child)` selectors.\n> The reason why we need this selector is because Shiki renders the last newline character\n> as another line, so we need to prevent the empty line from being numbered.\n\nAfter applying the CSS, our component should look like this:\n\n![Look ma, I've added line numbers to my component!](https://res.cloudinary.com/namchee/image/upload/v1735006683/posts/supercharing-astro-code-snippet/adding-line-numbers)\n\n### Adding Line Highlighting\n\nTo add highlights, we need to tell Shiki which line should be highlighted and Shiki needs to transform those lines to be distinguishable from non-highlighted lines. We can\nthen write a CSS style to mark those highlighted lines.\n\nFortunately, Shiki has already provided us with [`transformerMetaHighlight`](https://shiki.style/packages/transformers#transformermetahighlight) transformer that handles\nthis use case that we can install through `@shikijs/transformers` package and enable in our Astro config:\n\n```js title=astro.config.js\nimport { defineConfig } from 'astro/config';\n\nimport { transformerNotationHighlight } from '@shikijs/transformers';\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: {\n      transformers: [\n        {\n          pre(hast) {\n            hast.properties['data-meta'] = this.options.meta?.__raw;\n          }\n        },\n        transformerNotationHighlight(), // [!code highlight]\n      ]\n    }\n  },\n});\n```\n\nWe can then pass meta strings that defines lines that should be highlighted and style those highlighted lines with CSS:\n\n```css title=Styling highlighted line, copyable\n.astro-code code .line.highlighted {\n  /* light gray */\n  background-color: hsl(0, 0%, 90%);\n  /* Re-pad after border */\n  padding-left: 2px;\n}\n\n.astro-code code .line.highlighted::before {\n  /* light gray */\n  background-color: hsl(0, 0%, 90%);\n  /* blue */\n\tborder-left: 2px solid hsl(217, 91%, 60%);\n  /* Restore position after border */\n  margin-left: -2px;\n  color: hsla(0, 0%, 0%, 0.75);\n}\n```\n\nAfter applying the highlighted CSS, our component should now look like this:\n\n![There, a beautiful highlight!](https://res.cloudinary.com/namchee/image/upload/v1735011183/posts/supercharing-astro-code-snippet/adding-highlight)\n\n### Showing Language\n\nSince Shiki has already passed the language in the `data-language` prop, we can easily grab it and display it on the top right of the `\u003Cpre>` as such:\n\n```astro title=CodeSnippet.astro, copyable\n---\nconst meta: Record\u003Cstring, string> = {};\nconst {\n  \"data-meta\": dataMeta,\n  \"data-language\": lang,\n  class: className,\n  ...props\n} = Astro.props;\n\nif (dataMeta) {\n  dataMeta.split(\",\").forEach((prop: string) => {\n    const tokens = prop.split(\"=\");\n    meta[tokens[0].trim()] = tokens[1];\n  });\n}\n\nconst title = meta.title;\n---\n\n\u003Cfigure class=\"overflow-hidden border border-gray-300 rounded-md\">\n  {\n    title && (\n      \u003Cfigcaption class=\"flex justify-between items-center text-xs p-2 px-4 border-b border-b-gray-300 leading-normal rounded-t-md bg-gray-100\">\n        \u003Cp class=\"mb-0\">{title}\u003C/p>\n      \u003C/figcaption>\n    )\n  }\n\n  \u003C!-- We can't directly set \u003Cpre> with relative, as we need to preserve original block size on horizontal scroll -->\n  \u003Cdiv class=\"relative\">\n    \u003Cp class=\"absolute top-3 right-4 text-xs text-gray-500 font-mono\">{lang}\u003C/p>\n    \u003Cpre class={`${className} rounded-none p-0`} {...props}>\u003Cslot />\u003C/pre>\n  \u003C/div>\n\u003C/figure>\n```\n\nThe language should be shown as a fixed element on the top right of the code block.\n\n![Which language was it again? Oh it was JavaScript](https://res.cloudinary.com/namchee/image/upload/v1735102259/posts/supercharing-astro-code-snippet/adding-language)\n\n### Adding Copy to Clipboard Button\n\nAfter a series of features that are uninteractive, we are finally moving to the final feature that requires a sprinkle of interactivity: copy to clipboard button.\n\nBefore we implement this feature, we need to ensure that the original content is accessible by our component. We can implement the same trick that we use\nto pass captions: pass them as an attribute called `data-code`\n\n```js title=astro.config.js, copyable\nimport { defineConfig } from 'astro/config';\n\nimport { transformerNotationHighlight } from '@shikijs/transformers';\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: {\n      transformers: [\n        {\n          pre(hast) {\n            hast.properties['data-meta'] = this.options.meta?.__raw;\n            // the original source code is stored in `source` property\n            hast.properties['data-code'] = this.source; // [!code highlight]\n          }\n        },\n        transformerNotationHighlight(),\n      ]\n    }\n  },\n});\n```\n\nTo access user's clipboard, we need to use JavaScript to access the [Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API)\nwhich is available on the [`navigator`](https://developer.mozilla.org/en-US/docs/Web/API/Navigator) interface through the browser. The functionality\ncan then be triggered through a button click:\n\n```astro title=CodeSnippet.astro, copyable\n---\nconst meta: Record\u003Cstring, string> = {};\nconst {\n  \"data-meta\": dataMeta,\n  \"data-code\": dataCode,\n  \"data-language\": lang,\n  class: className,\n  ...props\n} = Astro.props;\n\nif (dataMeta) {\n  dataMeta.split(\",\").forEach((prop: string) => {\n    const tokens = prop.split(\"=\");\n    meta[tokens[0].trim()] = tokens[1];\n  });\n}\n\nconst title = meta.title;\n---\n\n\u003Cfigure class=\"overflow-hidden border border-gray-300 rounded-md\">\n  {\n    title && (\n      \u003Cfigcaption class=\"flex justify-between items-center text-xs p-2 px-4 border-b border-b-gray-300 leading-normal rounded-t-md bg-gray-100\">\n        \u003Cp class=\"mb-0\">{title}\u003C/p>\n        \u003Cbutton id=\"copy__code\" class=\"text-sm text-gray-500\">\n          Copy Code\n        \u003C/button>\n      \u003C/figcaption>\n    )\n  }\n\n  \u003Cdiv class=\"relative\">\n    \u003Cp class=\"absolute top-3 right-4 text-xs text-gray-500 font-mono\">{lang}\u003C/p>\n    \u003Cpre class={`${className} rounded-none p-0`} {...props}>\u003Cslot />\u003C/pre>\n  \u003C/div>\n\u003C/figure>\n\n\u003Cscript define:vars={{ dataCode }}>\n  if (typeof navigator.clipboard !== undefined) {\n    const trigger = document.querySelector(\"#copy__code\");\n\n    trigger.addEventListener(\"click\", () => {\n      // Write the code to clipboard\n      navigator.clipboard.writeText(dataCode); // [!code highlight]\n    });\n  }\n\u003C/script>\n```\n\nNow, there should be a 'Copy Code' text on the top right of the code block. Try clicking the element\nand see if the code inside the code block is copied to your clipboard by pasting it somewhere.\n\n![Try clicking the Copy Code text!](https://res.cloudinary.com/namchee/image/upload/v1735139073/posts/supercharing-astro-code-snippet/adding-copy-to-clipboard)\n\n## Final Thoughts\n\nAnd there we have it. We have explored the capabilities of Astro API when handling MDX to transform our default code snippet component into a more feature-packed\ncode snippet without having to directly define them as markups.\n\nBy using the same method, we can customize other default components like [what I did to my mine](https://github.com/Namchee/site/tree/master/src/components/astro/modules/posts/html)\nor you can go one step further on the features like inline execution, download code as file, or even [giving animation of code transformation](https://github.com/shikijs/shiki-magic-move).\n\nLastly, you can try [Astro Expressive Code](https://expressive-code.com/) if you want a feature-packed code snippet without the hassle. However, I believe the\nthe method shown here still has its merits as outside syntax highlighting, we are in full control of the markup and behavior.","src/content/posts/upgrading-astro-code-snippets.mdx","53640df439eeb684","upgrading-astro-code-snippets.mdx","_test-page",{"id":61,"data":63,"body":70,"filePath":71,"digest":72,"legacyId":73,"deferredRender":25},{"title":64,"subtitle":65,"tags":66,"publishedAt":69,"isDraft":25},"Post Test Page","This is a dummy blogpost page to test how the blogpost would look",[32,18,67,68],"javascript","typescript",["Date","2023-12-15T00:00:00.000Z"],"import Tweet from 'astro-tweet';\n\nimport DescriptionList from '@/components/astro/modules/posts/html/DescriptionList.astro';\nimport DescriptionTerm from '@/components/astro/modules/posts/html/DescriptionTerm.astro';\nimport DescriptionItem from '@/components/astro/modules/posts/html/DescriptionItem.astro';\n\nLorem ipsum dolor sit amet consectetur. Vitae amet tortor bibendum sit cursus et nisi non. Sagittis aliquet augue purus dignissim. Sodales pellentesque felis eleifend tristique molestie. **Accumsan amet erat mauris** consequat urna fames felis et sed.\n\nDiam nisl sit volutpat est pellentesque aliquet porttitor egestas commodo. Purus vitae egestas nunc turpis urna placerat proin dui mi. Iaculis sed in dui nisl. Hendrerit odio lectus enim vitae euismod enim. Urna lorem scelerisque nunc leo nunc odio mauris sed sed. Pharetra cras aenean tincidunt morbi purus molestie. Proin lobortis senectus pretium vel. Proin lobortis senectus pretium vel.\n\n![Image by Dude from Unsplash](https://res.cloudinary.com/namchee/image/upload/v1718288376/posts/test-page/banner.jpg)\n\n## Some Random Title\n\nDiam nisl sit volutpat est pellentesque aliquet porttitor egestas commodo. Purus vitae egestas nunc turpis urna placerat proin dui mi. Iaculis sed in dui nisl. Hendrerit odio lectus enim vitae euismod enim. Urna lorem scelerisque nunc leo nunc odio mauris sed sed. Pharetra cras aenean tincidunt morbi purus molestie.\n\nLorem ipsum dolor sit amet consectetur. Vitae amet tortor bibendum sit cursus et nisi non. Sagittis aliquet augue purus dignissim. Sodales pellentesque felis eleifend tristique molestie. Accumsan amet erat mauris consequat urna fames felis et sed.\n\n```ts title=This is a sample code snippet, copyable\nfunction testAdd() {\n  const a = 1; // idk man, I think this is a comment? But it's harmless at least!\n  const b = 1;\n  const c = 3; // [!code highlight]\n\n  const d = 4;\n\n  const f = 10;\n  const t1 = 122;\n  expect(add(1, 2)).toBe(2); // this should be true btw\n}\n```\n\n### A randomly-placed subheading\n\nLorem ipsum dolor sit amet consectetur. Vitae amet tortor bibendum sit cursus et nisi non. Sagittis aliquet augue purus dignissim. Sodales [pellentesque](https://www.google.com) felis eleifend tristique molestie. Accumsan amet erat mauris consequat urna fames felis et sed.\n\n```ts\nfunction testAdd() {\n  const a = 1;\n  const b = 1;\n  const c = 3;\n\n  const d = 4;\n\n  const f = 10;\n  const t1 = 122;\n  expect(add(1, 2)).toBe(2); // this should be true btw\n}\n```\n\n## Plant bullets in their lines\n\nDiam nisl sit volutpat est pellentesque aliquet porttitor egestas commodo. Purus vitae egestas nunc turpis urna placerat proin dui mi. Iaculis sed in dui nisl. Hendrerit odio lectus enim vitae euismod enim. Urna lorem scelerisque nunc leo nunc odio mauris sed sed. Pharetra cras aenean tincidunt morbi purus molestie.\n\n![A portrait image, for no reason](https://res.cloudinary.com/namchee/image/upload/v1718289415/posts/test-page/portrait.jpg)\n\nDiam nisl sit volutpat est pellentesque aliquet porttitor egestas commodo. Purus vitae egestas nunc turpis urna placerat proin dui mi. Iaculis sed in dui nisl. Hendrerit odio lectus enim vitae euismod enim. Urna lorem scelerisque nunc leo nunc odio mauris sed sed. Pharetra cras aenean tincidunt morbi purus molestie. Proin lobortis senectus pretium vel. Proin lobortis senectus pretium vel.\n\n\u003CTweet id=\"1068615953989087232\" />\n\n## Testing List\n\n- This is a list\n- This is another item of the list\n- Lastly, this is another item!\n\n## Testing&nbsp;`\u003Cdd>`\n\n\u003CDescriptionList>\n  \u003CDescriptionTerm>\n    Sample Term\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    In a world that's constantly changing, staying true to your values and goals can feel like navigating through a storm. Yet, it's in those moments of uncertainty that our character is truly tested and shaped.\n\n    As we move forward, let's remember that progress often lies in persistence and that even the smallest efforts contribute to something greater. Keep striving, keep growing, and always trust in your ability to adapt and succeed.\n  \u003C/DescriptionItem>\n\n  \u003CDescriptionTerm>\n    Another Term\n  \u003C/DescriptionTerm>\n  \u003CDescriptionItem>\n    Since I found my past experiments to be insightful, I will continue my code playground and share ideas or experiments I've conducted as either code snippets or posts.\n    Hopefully, I can test out my ideas and sharpen them through public feedback. Don't be shy to drop feedback!\n  \u003C/DescriptionItem>\n\u003C/DescriptionList>\n\n## Final Thoughts\n\nLife is a journey filled with twists, turns, and surprises, and it's often the moments we least expect that leave the greatest impact.\nWhether it's the lessons learned from challenges or the joy found in simple pleasures, every experience adds depth to our stories.\n\nAs we close this chapter, let's carry forward the resilience and insights we've gained, knowing that each step taken is a step closer to becoming the best version of ourselves.","src/content/posts/_test-page.mdx","2ee06329b8203190","_test-page.mdx"]