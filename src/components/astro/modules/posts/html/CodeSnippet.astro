---
import Copy from "@/components/vue/CopyButton.vue";

import Javascript from "@/components/astro/icons/Javascript.astro";
import Typescript from "@/components/astro/icons/Typescript.astro";
import AstroIcon from "@/components/astro/icons/AstroIcon.astro";
import Html from "@/components/astro/icons/Html.astro";
import Docker from "@/components/astro/icons/Docker.astro";
import Mdx from "@/components/astro/icons/Mdx.astro";
import Markdown from "@/components/astro/icons/Markdown.astro";
import CSS from "@/components/astro/icons/CSS.astro";

const meta: Record<string, string> = {};
const {
  "data-meta": dataMeta,
  "data-code": dataCode,
  class: className,
  ...props
} = Astro.props;

if (dataMeta) {
  dataMeta.split(",").forEach((prop: string) => {
    const tokens = prop.split("=");
    meta[tokens[0].trim()] = tokens[1];
  });
}

const langIconMap = {
  js: Javascript,
  ts: Typescript,
  astro: AstroIcon,
  html: Html,
  docker: Docker,
  mdx: Mdx,
  markdown: Markdown,
  css: CSS,
};

const LangIcon = langIconMap[props["data-language"]];

const title = meta.title;
const copy = "copy" in meta;
---

<figure class:list={[":uno:", "my-4", "transition-colors", "rounded-b"]}>
  {
    (title || copy) && (
      <figcaption class=":uno: sticky top-0 left-0 z-10 text-xs leading-normal bg-background text-balance transition-all overflow-hidden">
        <div class=":uno: bg-surface-1 rounded-t-md border-separator border p-2 px-4 w-full border-collapse flex justify-between items-center transition-colors">
          <div class=":uno: flex items-center gap-2">
            {LangIcon && (
              <LangIcon class=":uno: size-4 transition-colors shrink-0" />
            )}

            <p class=":uno: text-content transition-colors">{title}</p>
          </div>

          {copy && <Copy className=":uno:" value={dataCode} client:visible />}
        </div>
      </figcaption>
    )
  }

  <pre
    class:list={[
      ":uno:",
      "rounded-none",
      "py-2",
      "border-x border-b",
      "border-separator",
      "rounded-b",
      "transition-colors",
      "focus:outline-none",
      !title && !copy ? "rounded-t border-t" : "",
      className,
    ]}
    {...props}><slot /></pre>
</figure>
