---
import Check from '~icons/lucide/check';
import Clipboard from '~icons/lucide/clipboard';

import AstroIcon from '@/components/astro/icons/AstroIcon.astro';
import CSS from '@/components/astro/icons/CSS.astro';
import Docker from '@/components/astro/icons/Docker.astro';
import Html from '@/components/astro/icons/Html.astro';
import Javascript from '@/components/astro/icons/Javascript.astro';
import Markdown from '@/components/astro/icons/Markdown.astro';
import Mdx from '@/components/astro/icons/Mdx.astro';
import Typescript from '@/components/astro/icons/Typescript.astro';
import Copy from '@/components/vue/CopyButton.vue';

const meta: Record<string, string> = {};
const {
  'data-meta': dataMeta,
  'data-code': dataCode,
  class: className,
  ...props
} = Astro.props;

if (dataMeta) {
  dataMeta.split(',').forEach((prop: string) => {
    const tokens = prop.split('=');
    meta[tokens[0].trim()] = tokens[1];
  });
}

const langIconMap = {
  js: Javascript,
  ts: Typescript,
  astro: AstroIcon,
  html: Html,
  docker: Docker,
  mdx: Mdx,
  markdown: Markdown,
  css: CSS,
};

const LangIcon = langIconMap[props['data-language']];

const title = meta.title;
const copy = 'copy' in meta;
---

<figure class:list={[':uno:', 'my-4', 'transition-colors', 'rounded-b']}>
  {
    (title || copy) && (
      <figcaption class=":uno: text-xs leading-normal bg-background text-balance transition-all left-0 top-0 sticky z-10 overflow-hidden">
        <div class=":uno: p-2 px-4 border border-separator rounded-t-md bg-surface-1 flex w-full transition-colors items-center justify-between border-collapse">
          <div class=":uno: flex gap-2 items-center">
            {LangIcon && (
              <LangIcon class=":uno: shrink-0 size-4 transition-colors" />
            )}

            <p class=":uno: text-content transition-colors">{title}</p>
          </div>

          {copy && (
            <Copy className=":uno: z-20" value={dataCode} client:visible>
              <Clipboard class=":uno: size-[14px] transition-colors group-focus:text-heading group-hover:text-heading" />

              <Check
                slot="after-copy-icon"
                class=":uno: text-success size-[14px]"
              />
            </Copy>
          )}
        </div>
      </figcaption>
    )
  }

  <pre
    class:list={[
      ':uno:',
      'rounded-none',
      'py-2',
      'border-x border-b',
      'border-separator',
      'rounded-b',
      'transition-colors',
      'focus:outline-none',
      !title && !copy ? 'rounded-t border-t' : '',
      className,
    ]}
    {...props}><slot /></pre>
</figure>
