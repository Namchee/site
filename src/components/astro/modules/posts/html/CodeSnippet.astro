---
import Copy from "@/components/vue/CopyButton.vue";

import Clipboard from "@/components/astro/icons/Clipboard.astro";
import Check from "@/components/astro/icons/Check.astro";

import { Icon } from "astro-icon/components";

const meta: Record<string, string> = {};
const {
  "data-meta": dataMeta,
  "data-code": dataCode,
  class: className,
  ...props
} = Astro.props;

if (dataMeta) {
  dataMeta.split(",").forEach((prop: string) => {
    const tokens = prop.split("=");
    meta[tokens[0].trim()] = tokens[1];
  });
}

const langIconMap = {
  js: "file-type-js",
  ts: "file-type-typescript",
  astro: "file-type-astro",
  html: "file-type-htmlhint",
  docker: "file-type-docker",
};

const title = meta.title;
const copy = "copy" in meta;
const noLang = "noLang" in meta;
---

<figure class:list={[":uno:", "my-4", "transition-colors", "rounded-b"]}>
  {
    (title || copy) && (
      <figcaption class=":uno: sticky top-0 left-0 z-10 text-xs leading-normal bg-background text-balance transition-all overflow-hidden">
        <div class=":uno: bg-surface-1 rounded-t-md border-separator border p-2 px-4 w-full border-collapse flex justify-between items-center transition-colors">
          <div class=":uno: flex items-center gap-2">
            {langIconMap[props["data-language"]] && (
              <Icon
                name={`vscode-icons:${langIconMap[props["data-language"]]}`}
                class=":uno: size-4 transition-colors shrink-0"
              />
            )}

            <p class=":uno: text-content transition-colors">{title}</p>
          </div>

          {copy && (
            <Copy className=":uno:" value={dataCode} client:visible>
              <Clipboard class=":uno: size-[14px] transition-colors text-content/70 group-hover:text-heading group-focus:text-heading flex-shrink-0" />

              <Check
                slot="after-copy-icon"
                class=":uno: size-[14px] text-success flex-shrink-0"
              />
            </Copy>
          )}
        </div>
      </figcaption>
    )
  }

  <div class="relative">
    <p
      class:list={[
        "absolute top-3 right-4 font-mono text-sm text-content/50 leading-none max-md:hidden",
        { hidden: noLang },
      ]}
    >
      {props["data-language"]}
    </p>

    <pre
      class:list={[
        "rounded-none",
        "py-2",
        "border-x border-b",
        "border-separator",
        "rounded-b",
        "transition-colors",
        "focus:outline-none",
        !title && !copy ? "rounded-t" : "",
        className,
      ]}
      {...props}><slot /></pre>
  </div>
</figure>
