---
import type { MarkdownHeading } from "astro";

import generateToC from "@/scripts/toc";

import { Icon } from "astro-icon/components";
import TocList from "./TocList.astro";

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;
const tocList = generateToC(headings);
---

<nav class="container fixed top-32 left-8 text-sm space-y-4">
  <div class=":uno: flex items-center gap-3">
    <Icon name="lucide:align-left" class=":uno: size-4 text-content" />

    <p class=":uno: font-semibold text-heading transition-colors">
      In this post
    </p>
  </div>

  <div class=":uno: relative flex ml-1.5 pr-4 border-l border-separator">
    <div
      class="absolute left-0 thumb w-[1.5px] h-5 bg-heading -ml-[1px] transition-all"
    >
    </div>

    <div class=":uno: ml-5">
      <TocList headings={tocList} />
    </div>
  </div>
</nav>

<script>
  const thumb = document.querySelector(".thumb") as HTMLDivElement;
  const container = document.querySelector("container") as HTMLDivElement;
  const sections = document.querySelectorAll<HTMLElement>("section[id]");

  let intersector = 0;
  let start: number | null = null;

  const observer = new IntersectionObserver((entries) => {
    console.log(entries.filter(e => e.isIntersecting));
    for (const { target, isIntersecting } of entries) {
      const link = document.querySelector<HTMLAnchorElement>(
        `nav ul li a[href="#${target.id}"]`
      );

      const method = isIntersecting ? "add" : "remove";
      link?.classList[method]("text-heading", "font-medium");

      if (isIntersecting) {
        intersector += 1;

        if (start === null) {
          start =
            target.getBoundingClientRect().top -
            container.getBoundingClientRect().top;
        } else {
          start = Math.min(
            target.getBoundingClientRect().top -
              container.getBoundingClientRect().top,
            start
          );
        }
      } else {
        intersector -= 1;
      }
    }

    thumb.style.height = `${intersector * 20}px`;

    if (thumb && start) {
      thumb.style.top = `${start}px`;
    }

    if (intersector === 0) {
      thumb.style.top = '0px';
    }
  });

  sections.forEach((link) => observer.observe(link));
</script>
