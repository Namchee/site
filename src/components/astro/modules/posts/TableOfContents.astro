---
import type { MarkdownHeading } from 'astro';

import AlignLeft from '~icons/lucide/align-left';
import ArrowUp from '~icons/lucide/arrow-up';

import generateToC from '@/scripts/toc';

import TocList from './TocList.astro';

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;
const tocList = generateToC(headings);
---

<nav class=":uno: text-sm hidden left-8 top-32 fixed space-y-4 xl:block">
  <div class=":uno: flex gap-3 items-center">
    <AlignLeft
      class=":uno: text-content size-4 transition-colors"
    />

    <p class=":uno: text-heading font-semibold transition-colors">
      In this post
    </p>
  </div>

  <div
    class=":uno: ml-1.5 pr-4 border-l border-separator flex transition-colors relative"
  >
    <div
      aria-hidden="true"
      class=":uno: thumb rounded-full bg-heading h-5 w-[1.5px] transition-all left-0 absolute -ml-[1px]"
    >
    </div>

    <div class=":uno: ml-5">
      <TocList headings={tocList} />
    </div>
  </div>

  <button
    type="button"
    id="backToTop"
    class=":uno: group flex gap-2.5 items-center"
  >
    <ArrowUp
      class=":uno: text-content size-4 transition-colors group-hover:text-heading"
    />

    <p class=":uno: text-content transition-colors group-hover:text-heading">
      Back to Top
    </p>
  </button>
</nav>

<script>
  const thumb = document.querySelector('.thumb') as HTMLDivElement;
  const sections = document.querySelectorAll<HTMLElement>('section[id]');
  const backToTop = document.querySelector('#backToTop') as HTMLButtonElement;

  const activeSections = new Set<HTMLAnchorElement>();

  function updateThumb() {
    let max = 0;

    thumb.style.height = '0px';

    if (activeSections.size > 0) {
      let min = Number.MAX_SAFE_INTEGER;

      for (const el of activeSections) {
        const top = el.offsetTop;

        min = Math.min(top, min);
        max = Math.max(top, max);
      }

      thumb.style.top = `${min}px`;
      thumb.style.height = `${max - min + 18}px`;
    }
  }

  const observer = new IntersectionObserver((entries) => {
    for (const { target, isIntersecting } of entries) {
      const link = document.querySelector<HTMLAnchorElement>(
        `nav ul li a[href="#${target.id}"]`,
      );

      if (!link) {
        continue;
      }

      const method = isIntersecting ? 'add' : 'remove';
      link.classList[method]('text-heading', 'font-medium');

      if (isIntersecting) {
        activeSections.add(link);
      } else {
        activeSections.delete(link);
      }
    }

    updateThumb();
  });

  for (const link of sections) {
    observer.observe(link);
  }

  backToTop.addEventListener('click', () => {
    window.scrollTo(0, 0);
  });
</script>
