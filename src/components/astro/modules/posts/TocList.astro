---
import AppLink from "@/components/astro/ui/AppLink.astro";

import type { Heading } from "@/scripts/toc";

interface Props {
  headings: Heading[];
}

const { headings } = Astro.props;

const marginMap = {
  2: "pl-0",
  3: "pl-4 first:mt-2",
  4: "pl-8 first:mt-2",
  5: "pl-12 first:mt-2",
};
---

<ul class=":uno: space-y-2">
  {
    headings.map((head) => (
      <li class={marginMap[head.depth]}>
        <AppLink
          href={`#${head.slug}`}
          class=":uno: text-content transition-all text-sm block"
        >
          {head.text}
        </AppLink>

        {head.subheadings.length > 0 && (
          <Astro.self headings={head.subheadings} />
        )}
      </li>
    ))
  }
</ul>

<script>
  const tocLinks = document.querySelectorAll("section[id]");

  let lastScrollY = window.scrollY;
  let currentActiveLink;

  const observer = new IntersectionObserver(
    (entries) => {
      const intersectingEntries = entries.filter(
        (entry) => entry.isIntersecting
      );

      if (intersectingEntries.length > 0) {
        // Determine scroll direction
        const scrollDirection = window.scrollY > lastScrollY ? "down" : "up";
        lastScrollY = window.scrollY;

        const targetEntry =
          scrollDirection === "down"
            ? intersectingEntries[intersectingEntries.length - 1]
            : intersectingEntries[0];

        if (targetEntry) {
          const id = targetEntry.target.id;
          const newActiveLink = document.querySelector<HTMLAnchorElement>(
            `nav ul li a[href="#${id}"]`
          );

          if (newActiveLink && currentActiveLink !== newActiveLink) {
            if (currentActiveLink) {
              currentActiveLink.classList.remove("text-heading", "font-medium");
            }

            newActiveLink.classList.add("text-heading", "font-medium");
            currentActiveLink = newActiveLink;
          }
        }
      }
    },
    {
      threshold: [0.5],
    }
  );

  function initializeActiveLink(): void {
    const tocLinks = document.querySelectorAll<HTMLElement>("section[id]");

    // Find all partially visible sections
    const visibleSections = Array.from(tocLinks).filter((section) => {
      const rect = section.getBoundingClientRect();
      return rect.top < window.innerHeight && rect.bottom > 0;
    });

    // Select the section closest to the top of the viewport
    const closestSection = visibleSections.reduce<{
      section: HTMLElement;
      rectTop: number;
    } | null>((closest, section) => {
      const rect = section.getBoundingClientRect();
      if (!closest || rect.top < closest.rectTop) {
        return { section, rectTop: rect.top };
      }
      return closest;
    }, null);

    if (closestSection) {
      const id = closestSection.section.id;
      const newActiveLink = document.querySelector<HTMLAnchorElement>(
        `nav ul li a[href="#${id}"]`
      );

      if (newActiveLink) {
        if (currentActiveLink) {
          currentActiveLink.classList.remove("text-heading", "font-medium");
        }
        newActiveLink.classList.add("text-heading", "font-medium");
        currentActiveLink = newActiveLink;
      }
    }
  }

  // Observe each section and set initial active link
  tocLinks.forEach((link) => observer.observe(link));
  initializeActiveLink();
</script>
