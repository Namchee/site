---
import "@/assets/styles/tweet.css";

import { Icon } from "astro-icon/components";

import type { CollectionEntry } from "astro:content";
import type { MarkdownFile } from "@/plugins/remark/types";

import Layout from "@/components/astro/layout/Layout.astro";
import Badge from "@/components/astro/ui/Badge.astro";

import BackButton from "./BackButton.astro";
import TableOfContents from "./TableOfContents.astro";
import Webmention from "./Webmentions.astro";
import SocialLinks from "./SocialLinks.astro";
import AppLink from "../../ui/AppLink.astro";

interface Props {
  frontmatter: CollectionEntry<"posts">["data"] &
    MarkdownFile["data"]["astro"]["frontmatter"] & {
      slug: string;
    };
}

const { frontmatter } = Astro.props;

const publishedAt = frontmatter.publishedAt;
const lastModified = !!frontmatter.lastModified
  ? frontmatter.lastModified
  : publishedAt;
---

<Layout
  title={`${frontmatter.title} â€” Namchee`}
  description={frontmatter.subtitle}
  og={`posts/og-${frontmatter.slug}`}
>
  <progress class=":uno: fixed w-screen z-10 reading__progress h-[2px] left-0"
  ></progress>

  <BackButton />

  <article class=":uno: w-full mx-auto px-8 my-32 max-w-[45rem]">
    <AppLink href="/posts" class=":uno: flex col-start-1 col-end-13 space-x-1 mb-8">
      <Icon name="lucide:arrow-left" class="w-4 h-auto" />

      <span>Back to Posts</span>
    </AppLink>

    <h1
      class=":uno: text-heading font-semibold text-3xl md:text-4xl mb-4 tracking-tight text-balance leading-tight!"
    >
      {frontmatter.title}
    </h1>

    <section class=":uno: flex col-start-1 col-end-13 md:col-start-2 md:col-end-12 lg:col-start-3 lg:col-end-11 xl:col-start-4 xl:col-end-10 space-x-4 mb-8">
      <div
        class="flex items-center space-x-[6px] md:space-x-2 text-xs md:text-sm"
        title={`Published At ${new Date(publishedAt).toDateString()}`}
      >
        <Icon name="lucide:pencil-line" class="w-4 h-auto" />

        <time
          datetime={frontmatter.publishedAt as unknown as string}
          class=":uno: text-heading font-medium block"
        >
          {
            new Date(publishedAt).toLocaleString("en-GB", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })
          }
        </time>
      </div>

      <div
        class="items-center space-x-[6px] md:space-x-2 text-xs md:text-sm sm:flex ml-4 md:ml-unset hidden"
        title={`Last Modified ${new Date(lastModified).toDateString()}`}
      >
        <Icon name="lucide:history" class="w-4 h-auto" />

        <time
          datetime={frontmatter.lastModified as unknown as string}
          class=":uno: text-heading font-medium block"
        >
          {
            new Date(lastModified).toLocaleString("en-GB", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })
          }
        </time>
      </div>

      <div
        class="flex items-center space-x-[6px] md:space-x-2 text-xs md:text-sm ml-auto!"
        title={`${frontmatter.timeToRead} minutes read`}
      >
        <Icon name="lucide:timer" class="w-4 h-auto" />

        <p class="text-heading font-medium">
          {frontmatter.timeToRead} minutes
        </p>
      </div>
    </section>

    <section
      class=":uno: col-start-1 col-end-13 md:col-start-2 md:col-end-12 lg:col-start-3 lg:col-end-11 xl:col-start-4 xl:col-end-10 leading-[1.75] space-y-5"
    >
      <slot />
    </section>

    <section
      class=":uno: flex col-start-1 col-end-13 md:col-start-2 md:col-end-12 lg:col-start-3 lg:col-end-11 xl:col-start-4 xl:col-end-10 justify-between mt-16"
    >
      <div>
        <p
          class=":uno: font-semibold text-sm leading-normal md:text-base mb-5"
        >
          Share this Post
        </p>

        <SocialLinks slug={frontmatter.slug} title={frontmatter.title} />
      </div>

      <div>
        <p
          class=":uno: font-semibold text-sm leading-normal md:text-base mb-5 text-right"
        >
          Tags
        </p>

        <div class=":uno: flex flex-wrap gap-2">
          {
            frontmatter.tags.map((tag) => (
              <Badge>{tag[0].toUpperCase() + tag.slice(1)}</Badge>
            ))
          }
        </div>
      </div>
    </section>
  </article>
</Layout>

<style>
  .reading__progress::-webkit-progress-bar {
    background-color: oklch(var(--background));
  }
  .reading__progress::-webkit-progress-value {
    background-color: oklch(var(--primary));
  }

  .reading__progress::-moz-progress-bar {
    background-color: oklch(var(--primary));
  }
</style>

<script>
  const progressBar = document.querySelector(".reading__progress");

  const windowHeight = window.innerHeight;
  const documentHeight = document.documentElement.scrollHeight;
  const max = documentHeight - windowHeight;
  progressBar.setAttribute("max", max.toString());

  window.addEventListener("scroll", () => {
    progressBar.setAttribute("value", window.scrollY.toString());
  });

  const backToTop = document.querySelector(".backToTop__button");
  backToTop.addEventListener("click", () => {
    window.scrollTo(0, 0);
  });
</script>
