---
import Cog from '~icons/lucide/cog';
import Home from '~icons/lucide/home';
import LibraryBig from '~icons/lucide/library-big';
import Newspaper from '~icons/lucide/newspaper';

import CommandMenu from '@/components/vue/CommandMenu.vue';
import NavigationItem from '@/components/vue/NavigationItem.vue';
import ThemeSwitcher from '@/components/vue/ThemeSwitcher.vue';

interface Props {
  posts: { title: string; href: string }[];
}

const links = [
  {
    href: '/',
    label: 'Home',
    icon: Home,
    key: 'Home',
  },
  {
    href: '/posts',
    label: 'Posts',
    icon: Newspaper,
  },
  {
    href: '/library',
    label: 'Library',
    icon: LibraryBig,
  },
  {
    href: '/colophon',
    label: 'Colophon',
    icon: Cog,
  },
];

const directLinks = links.slice(0, -1);

const currentPath = Astro.url.pathname;
const { posts } = Astro.props;

function getNavClasses(linkHref: string, currentPath: string, idx: number) {
  const isFirst = idx === 0;
  const isActive
    = new RegExp(`${linkHref}/.?`).test(currentPath) || currentPath === linkHref;

  return {
    'ml-1': isFirst,
    'text-heading bg-surface-2': isActive,
  };
}
---

<nav
  class=":uno: border border-separator rounded-md bg-background flex shadow-lg translate-x-[-50%] transition-colors bottom-8 left-1/2 fixed z-20 dark:bg-[var(--navigation)]"
>
  {
    directLinks.map((link, idx) => (
      <NavigationItem
        label={link.label}
        class:list={getNavClasses(link.href, currentPath, idx)}
        href={link.href}
        client:load
      >
        <link.icon class=":uno: h-auto w-5" />
      </NavigationItem>
    ))
  }

  <div class=":uno: bg-separator w-[0.5px] transition-colors dark:bg-[var(--navigation-separator)]"></div>

  <CommandMenu posts={posts} links={links} client:load />

  <ThemeSwitcher client:visible />
</nav>

<script is:inline>
  /* eslint-disable no-undef */

  const button = document.querySelector('.theme-toggle');
  function toggleThemeSwitcher() {
    button.classList.toggle('theme-toggle--toggled');
  }

  if (theme === 'dark') {
    button.classList.add('theme-toggle--toggled');
  }

  button.addEventListener('click', () => {
    const documentTheme = docEl.classList.contains('dark') ? 'light' : 'dark';
    toggleThemeSwitcher();
    toggleTheme(documentTheme);
  });

  window.addEventListener('storage', () => {
    const actualTheme = window.localStorage.getItem('theme');
    toggleThemeSwitcher();
    toggleTheme(actualTheme);
  });

  media.addEventListener('change', () => {
    const mediaTheme = media.matches ? 'dark' : 'light';
    toggleThemeSwitcher();
    toggleTheme(mediaTheme);
  });
</script>
